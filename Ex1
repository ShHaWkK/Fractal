; Fractal Mandelbrot 

; external functions from X11 library
extern XOpenDisplay
extern XDisplayName
extern XCloseDisplay
extern XCreateSimpleWindow
extern XMapWindow
extern XRootWindow
extern XSelectInput
extern XFlush
extern XCreateGC
extern XSetForeground
extern XDrawLine
extern XNextEvent

; external functions from stdio library (ld-linux-x86-64.so.2)    
extern printf
extern exit

%define	StructureNotifyMask	131072
%define KeyPressMask		1
%define ButtonPressMask		4
%define MapNotify		19
%define KeyPress		2
%define ButtonPress		4
%define Expose			12
%define ConfigureNotify		22
%define CreateNotify 16
%define QWORD	8
%define DWORD	4
%define WORD	2
%define BYTE	1

global main

section .bss
display_name:	resq	1
screen:			resd	1
depth:         	resd	1
connection:    	resd	1
width:         	resd	1
height:        	resd	1
window:		resq	1
gc:		resq	1
image_x: resd 1
image_y: resd 1

c_r: resd 1
c_i: resd 1
z_r: resd 1
z_i: resd 1
i: resd 1
tmp: resd 1

section .data

event:		times	24 dq 0

x1:	dd	-2.1
x2:	dd	0.6
y1:	dd	-1.2
y2:	dd	1.2

zoom: dd 100.0
iteration_max: dd 50

zero: dd 0.0
two: dd 2.0
four: dd 4.0


section .text
	
;##################################################
;########### PROGRAMME PRINCIPAL ##################
;##################################################

main:
xor     rdi,rdi
call    XOpenDisplay	; Création de display
mov     qword[display_name],rax	; rax=nom du display

; display_name structure
; screen = DefaultScreen(display_name);
mov     rax,qword[display_name]
mov     eax,dword[rax+0xe0]
mov     dword[screen],eax

;création de la fenetre 
mov rdi,qword[display_name]
mov esi,dword[screen]
call XRootWindow
mov rbx,rax

mov rdi,qword[display_name]
mov rsi,rbx
mov rdx,10
mov rcx,10
mov r8,400	; largeur
mov r9,400	; hauteur
push 0xFFFFFF	; background  0xRRGGBB
push 0x00FF00
push 1
call XCreateSimpleWindow
mov qword[window],rax

mov rdi,qword[display_name]
mov rsi,qword[window]
mov rdx,131077 ;131072
call XSelectInput

mov rdi,qword[display_name]
mov rsi,qword[window]
call XMapWindow

mov rsi,qword[window]
mov rdx,0
mov rcx,0
call XCreateGC
mov qword[gc],rax

mov rdi,qword[display_name]
mov rsi,qword[gc]
mov rdx,0x000000	; Couleur du crayon
call XSetForeground


; calcul de la taille de image_x et image_y
movss xmm0,dword[x2]
subss xmm0,dword[x1]
mulss xmm0, dword[zoom]
cvtss2si eax,xmm0
mov dword[image_x], eax

movss xmm0,dword[y2]
subss xmm0,dword[y1]
mulss xmm0, dword[zoom]
cvtss2si eax,xmm0
mov dword[image_y], eax


boucle: ; boucle de gestion des évènements

mov rdi,qword[display_name]
mov rsi,event
call XNextEvent

cmp dword[event],ConfigureNotify	; à l'apparition de la fenêtre
je dessin							; on saute au label 'dessin'

cmp dword[event],KeyPress			; Si on appuie sur une touche
je closeDisplay						; on saute au label 'closeDisplay' qui ferme la fenêtre
jmp boucle

;#########################################
;#		DEBUT DE LA ZONE DE DESSIN		 #
;#########################################
dessin:
mov r14d, 0

largX:
; Calculs
mov r15d, 0
largY:
; Calculs

;c_r=x/zoom +x1
cvtsi2ss xmm0, r14d
divss xmm0, dword[zoom]
addss xmm0, dword[x1]
movss dword[c_r], xmm0

;c_i=y/zoom +x1
cvtsi2ss xmm0,r15d
divss xmm0, dword [zoom]
addss xmm0, [y1]
movss [c_i], xmm0

;z_r=0 z_i=0 i=0
movss xmm0, dword[zero]
movss dword[z_r],xmm0
movss dword[z_i],xmm0
mov dword[i], 0
mov r12d, [i] ;debug

; Boucle while
while:

;r14=z_r**2
movss xmm1, [z_r]
movss dword[tmp],xmm1
mulss  xmm1, xmm1 
movss dword[z_r],xmm1
movss xmm2, xmm1

;r14=z_i**2
movss xmm1, dword[z_i]
mulss xmm1,xmm1 ;r14=z_i**2

; Calcul de z_r
; z_r**2 - z_i**2
subss xmm2,xmm1

; (z_r**2 - z_i**2 ) + c_r
addss xmm2, dword[c_r]
movss dword[z_r], xmm2

; Calcul de z_i
movss xmm1,dword[z_i]
mulss xmm1, dword[two]
movss xmm3, dword[tmp]
mulss xmm3,xmm1
addss xmm3, dword[c_i]
movss dword[z_i],xmm3

; increment i
inc dword[i]

; while condition
movss xmm0, dword[z_r]
mulss xmm0,xmm0
movss xmm1,dword[z_i]
mulss xmm1,xmm1
addss xmm0, xmm1
ucomiss xmm0,dword[four]
jae stopboucle

mov r9d, dword[iteration_max]
mov r13d, [i] ;debug
cmp dword[i], r9d
jae stopboucle



jmp while

stopboucle:

cmp dword[i], r9d
jne noDraw


;Draw

;couleur de la ligne 1
mov rdi,qword[display_name]
mov rsi,qword[gc]
mov edx,0x000000	; Couleur du crayon ; rouge
call XSetForeground

;r10 => r14 et r11 => 15


; dessin de la ligne 1
mov rdi,qword[display_name]
mov rsi,qword[window]
mov rdx,qword[gc]
mov ecx,r14d	; coordonnée source en x
mov r8d,r15d	; coordonnée source en y
mov r9d,r14d	; coordonnée destination en x
push r15		; coordonnée destination en y
call XDrawLine

jmp fin
noDraw:
;pixel de couleur 
isOutside:    
mov eax, dword[i]              
imul eax, 255                  
mov ebx, dword[iteration_max]  
cdq                            
div ebx                        
shl eax, 8                    
mov edx, eax                   
jmp setColor

isInside:
    ; Si i est égal à iteration_max, dessinez en noir
xor edx, edx                   

setColor:
    ;  XSetForeground
mov rdi, qword[display_name]
mov rsi, qword[gc]
call XSetForeground

    ; Dessinez le pixel avec la couleur calculée
mov rdi, qword[display_name]
mov rsi, qword[window]
mov rdx, qword[gc]
mov ecx, r14d                 ; Coordonnée x
mov r8d, r15d                 ; Coordonnée y
lea r9d, [r14d + 1]           ; Coordonnée x+1 (pour XDrawLine)
lea r10d, [r15d + 1]          ; Coordonnée y+1 (pour XDrawLine)
call XDrawLine    

fin: 

; Préparation pochaine boucle
add r15d, 1
cmp r15d, dword[image_y]
jl largY


; Préparation pochaine boucle
add r14d, 1
cmp r14d, dword[image_x]
;add r10d, 1
jl largX


; ############################
; # FIN DE LA ZONE DE DESSIN #
; ############################
jmp flush

flush:
mov rdi,qword[display_name]
call XFlush
jmp boucle
mov rax,34
syscall

closeDisplay:
    mov     rax,qword[display_name]
    mov     rdi,rax
    call    XCloseDisplay
    xor	    rdi,rdi
    call    exit
